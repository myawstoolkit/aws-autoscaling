# The following components are created for you as a part of the lab environment:
# Amazon VPC
# Public Subnets
# Private Subnets
# Amazon EC2 - Command Host (in the public subnet), you will log in to this instance to create a few of your AWS assets.

AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS TechU - Highly Available Web Applications: Scaling in AWS (Linux)'
Parameters:
  VPCCIDR:
    Description: CIDR Block for VPC
    Type: String
    Default: 10.5.0.0/16
    AllowedValues:
      - 10.5.0.0/16
  PublicSubnet1Param:
    Description: Public Subnet 1
    Type: String
    Default: 10.5.10.0/24
    AllowedValues:
      - 10.5.10.0/24
  PrivateSubnet1Param:
    Description: Private Subnet 1
    Type: String
    Default: 10.5.50.0/24
    AllowedValues:
      - 10.5.50.0/24
  PublicSubnet2Param:
    Description: Public Subnet 2
    Type: String
    Default: 10.5.20.0/24
    AllowedValues:
      - 10.5.20.0/24
  PrivateSubnet2Param:
    Description: Private Subnet 2
    Type: String
    Default: 10.5.100.0/24
    AllowedValues:
      - 10.5.100.0/24
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
  #####
  LatestAMZN2AmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  
  RoleName:
    Description: Enter the service linked role name.
    Type: String
    Default: AWSServiceRoleForAutoScaling

  ServiceName:
    Description: Choose a service to create a service linked role.
    Type: String
    Default: autoscaling.amazonaws.com
    
  #####
  
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Lab VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
      - VPC
      - InternetGateway
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Param
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 1
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Param
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 2
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Param
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 1
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Param
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Private Subnet 2
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - VPC
      - AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - PublicRouteTable
      - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnet1
      - AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PublicSubnet2
      - AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PrivateSubnet1
      - AttachGateway
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - PublicRouteTable
      - PrivateSubnet2
      - AttachGateway
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Network
          Value: Private
  
  #####
  # NAT Gateway

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt
        - NATGatewayEIP
        - AllocationId

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway

  LambdaSLRRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: createservicerole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                  - iam:UpdateServiceLinkedRole
                  - iam:DeleteServiceLinkedRole
                  - iam:AttachRolePolicy
                  - iam:ListRoles
                  - events:PutRule
                  - events:DeleteRule
                  - events:PutTargets
                  - events:RemoveTargets
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource: '*'
 
  CreateServiceLinkedRole:
    Type: AWS::Lambda::Function
    DependsOn:
    - LambdaSLRRole
    Properties: 
      FunctionName: CreateServiceLinkedRole
      Description: Create a service linked role if absent. 
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaSLRRole.Arn
      Runtime: "python3.7"
      Timeout: 50
      Code:
        ZipFile: |
          """
          This application creates a service
          linked role if it is missing.
          """
          import boto3
          import cfnresponse
          import json
          import logging
          import traceback

          # Define logging information
          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(f"Event: {json.dumps(event)}")
              logger.info(f"Context: {str(dir(context))}")
              operation = event['RequestType']
              physical_id = None
              data = { }
              try:
                  role_check = event['ResourceProperties']['CheckRoleName']
                  aws_service_info = event['ResourceProperties']['AWSServiceInfo']
                  if operation == 'Create':  
                      client = boto3.client('iam')
                      response = client.list_roles(PathPrefix='/aws-service-role/')
                      role_names = list()
                      for roles in response["Roles"]:
                          role_names.append(roles["RoleName"])
                      if role_check not in role_names:
                          logger.info(f"Creating service linked role {role_check}...")
                          create_role_response = client.create_service_linked_role(
                              AWSServiceName=aws_service_info,
                              Description='Custom service linked role created for the lab.',
                              #CustomSuffix='lab'
                          )
                          logger.info(f"Details for create service linked role: {create_role_response}")
                          data['ServiceLinkedRoleOutput'] = create_role_response['Role']['RoleName']
                      else:
                          logger.info(f"Service linked role {role_check} already present.")
                          data['ServiceLinkedRoleOutput'] = 'Service linked role already present.'

              except Exception as excep:
                  logger.error(f"CloudFormation custom resource {operation} failed. Exception: {traceback.format_exc()}")
                  data['ServiceLinkedRoleOutput'] = None
                  status = cfnresponse.FAILED
              else:
                  status = cfnresponse.SUCCESS
                  logger.info(f"CloudFormation custom resource {operation} succeeded. Result data {json.dumps(data)}.")
              cfnresponse.send(event, context, status, data, physical_id)

  ServiceLinkedRoleCustomResource:
    Type: Custom::ServiceLinkedRoleCustomResource
    DependsOn:
      - CreateServiceLinkedRole
    Properties:
      ServiceToken: !GetAtt CreateServiceLinkedRole.Arn
      CheckRoleName: !Ref RoleName
      AWSServiceInfo: !Ref ServiceName


  #####
  
  
  CommandHostSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: AttachGateway
    Properties:
      GroupDescription: Security Group for Command Host
      GroupName: CommandHostSecurityGroup
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: CommandHostSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  HTTPAccess:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow HTTP access to client.
      GroupName: HTTPAccess
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: HTTPAccess
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LabRootRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/ReadOnlyAccess'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowAllActions
                Effect: Allow
                Action:
                  - 'autoscaling:AttachInstances'
                  - 'autoscaling:*AutoScalingGroup'
                  - 'autoscaling:Describe*'
                  - 'autoscaling:DetachInstances'
                  - 'autoscaling:*Tags'
                  - 'autoscaling:*Configuration'
                  - 'autoscaling:*Hook'
                  - 'autoscaling:*Lifecycle*'
                  - 'autoscaling:*LoadBalancer*'
                  - 'autoscaling:*Metrics*'
                  - 'autoscaling:*Policy'
                  - 'autoscaling:*Processes'
                  - 'autoscaling:*Standby'
                  - 'autoscaling:*Scheduled*'
                  - 'autoscaling:SetInstanceHealth'
                  - 'autoscaling:SetDesiredCapacity'
                  - 'autoscaling:SetInstanceProtection'
                  - 'cloudformation:List*'
                  - 'cloudformation:Describe*'
                  - 'cloudformation:Detect*'
                  - 'cloudformation:EstimateTemplateCost'
                  - 'cloudformation:Get*'
                  - 'cloudwatch:Describe*'
                  - 'cloudwatch:Get*'
                  - 'cloudwatch:List*'
                  - 'ec2:*Address*'
                  - 'ec2:Cancel*'
                  - 'ec2:Describe*'
                  - 'ec2:*Gateway'
                  - 'ec2:Get*'
                  - 'ec2:*Image*'
                  - 'ec2:*Network*'
                  - 'ec2:*Route*'
                  - 'ec2:*SecurityGroup*'
                  - 'ec2:*Snapshot*'
                  - 'ec2:*Subnet*'
                  - 'ec2:*Vpc*'
                  - 'ec2:*Vpn*'
                  - 'ec2:DeleteFleets'
                  - 'ec2:ResetEbsDefaultKmsKeyId'
                  - 'ec2:ReportInstanceStatus'
                  - 'ec2:ImportKeyPair'
                  - 'ec2:StopInstances'
                  - 'ec2:ProvisionByoipCidr'
                  - 'ec2:WithdrawByoipCidr'
                  - 'ec2:AssociateDhcpOptions'
                  - 'ec2:ConfirmProductInstance'
                  - 'ec2:ConfirmProductInstance'
                  - 'ec2:ModifyFpgaImageAttribute'
                  - 'ec2:EnableEbsEncryptionByDefault'
                  - 'ec2:SendDiagnosticInterrupt'
                  - 'ec2:AssociateIamInstanceProfile'
                  - 'ec2:ReplaceIamInstanceProfileAssociation'
                  - 'ec2:CreateDhcpOptions'
                  - 'ec2:DeleteDhcpOptions'
                  - 'ec2:CreateKeyPair'
                  - 'ec2:DeleteKeyPair'
                  - 'ec2:BundleInstance'
                  - 'ec2:CreateTags'
                  - 'ec2:DisassociateIamInstanceProfile'
                  - 'ec2:AttachVolume'
                  - 'ec2:CreateInstanceExportTask'
                  - 'ec2:MonitorInstances'
                  - 'ec2:UnmonitorInstances'
                  - 'ec2:DetachVolume'
                  - 'ec2:DeleteVolume'
                  - 'ec2:DeleteLaunchTemplate*'
                  - 'ec2:CreateFlowLogs'
                  - 'ec2:DeleteFlowLogs'
                  - 'ec2:ModifyIdentityIdFormat'
                  - 'ec2:ModifyIdFormat'
                  - 'ec2:AdvertiseByoipCidr'
                  - 'ec2:DeprovisionByoipCidr'
                  - 'ec2:DeleteTags'
                  - 'ec2:TerminateInstances'
                  - 'ec2:DisableEbsEncryptionByDefault'
                  - 'ec2:ModifyEbsDefaultKmsKeyId'
                  - 'elasticloadbalancing:AddListenerCertificates'
                  - 'elasticloadbalancing:Modify*'
                  - 'elasticloadbalancing:RegisterTargets'
                  - 'elasticloadbalancing:Set*'
                  - 'elasticloadbalancing:RemoveListenerCertificates'
                  - 'elasticloadbalancing:DeleteLoadBalancer'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:CreateListener'
                  - 'elasticloadbalancing:CreateRule'
                  - 'elasticloadbalancing:DeleteRule'
                  - 'elasticloadbalancing:CreateLoadBalancer'
                  - 'elasticloadbalancing:*TargetGroup'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:*Tags'
                  - 'elasticloadbalancing:DeleteListener'
                  - 'events:Describe*'
                  - 'events:List*'
                  - 'events:TestEventPattern'
                  - 'iam:List*'
                  - 'iam:Get*'
                  - 'logs:List*'
                  - 'logs:Describe*'
                  - 'logs:Get*'
                  - 'logs:StartQuery'
                  - 'logs:StopQuery'
                  - 'logs:TestMetricFilter'
                  - 'logs:FilterLogEvents'
                  - 'resource-groups:Get*'
                  - 'resource-groups:List*'
                  - 'resource-groups:SearchResources'
                  - 'ssm:List*'
                  - 'ssm:Describe*'
                  - 'ssm:Get*'
                  - 'ssm:PutInventory'
                  - 'ssm:PutComplianceItems'
                  - 'ssm:PutConfigurePackageResult'
                  - 'ssm:UpdateAssociationStatus'
                  - 'ssm:UpdateInstanceAssociationStatus'
                  - 'ssm:UpdateInstanceInformation'
                  - 'ssm:CancelCommand'
                  - 'ssm:SendCommand'
                  - 'ssm:StartAutomationExecution'
                  - 'ssm:StartSession'
                  - 'ssm:TerminateSession'
                  - 'ssm:ResumeSession'
                  - 'ssm:DescribeSessions'
                  - 'ssm:GetConnectionStatus'
                  - 'sns:TagResource'
                  - 'sns:Delete*'
                  - 'sns:List*'
                  - 'sns:Unsubscribe'
                  - 'sns:Set*'
                  - 'sns:UntagResource'
                  - 'sns:OptInPhoneNumber'
                  - 'sns:CheckIfPhoneNumberIsOptedOut'
                  - 'sns:Publish'
                  - 'sns:Subscribe'
                  - 'sns:ConfirmSubscription'
                  - 'sns:RemovePermission'
                  - 'sns:Get*'
                  - 'sns:Create*'
                  - 'sns:AddPermission'
                  - 'sts:DecodeAuthorizationMessage'
                  - 'tag:*'
                Resource: '*'
              - Sid: RestrictInstanceActions
                Effect: Allow
                Action:
                  - 'ec2:CreateVolume'
                  - 'ec2:ModifyVolume'
                  - 'ec2:ImportVolume'
                  - 'ec2:ModifyVolumeAttribute'
                  - 'ec2:ModifyFleet'
                  - 'ec2:ImportSnapshot'
                  - 'ec2:ResetInstanceAttribute'
                  - 'ec2:CreateFleet'
                  - 'ec2:CreateLaunchTemplateVersion'
                  - 'ec2:EnableVolumeIO'
                  - 'ec2:CreateLaunchTemplate'
                  - 'ec2:ImportInstance'
                  - 'ec2:ModifyInstanceCreditSpecification'
                  - 'ec2:ModifyLaunchTemplate'
                  - 'ec2:ModifyInstanceAttribute'
                  - 'ec2:RebootInstances'
                  - 'ec2:RunInstances'
                  - 'ec2:StartInstances'
                Resource: '*'
                Condition:
                  StringEqualsIfExists:
                    'ec2:Owner': amazon
                  'ForAllValues:StringLikeIfExists':
                    'ec2:InstanceType':
                      - '*.nano'
                      - '*.micro'
                      - '*.small'
                    'ec2:Tenancy': default
                  StringNotEqualsIfExists:
                    'ec2:PlacementGroupStrategy': cluster
                  StringNotEqualsIgnoreCaseIfExists:
                    'ec2:VolumeType':
                      - io1
                      - st1
                  NumericLessThanEqualsIfExists:
                    'ec2:VolumeSize': '51'
              - Sid: RestrictActions
                Effect: Deny
                Action:
                  - 'ec2:*Spot*'
                  - 'ec2:*ReservedInstances*'
                  - 'ec2:*Scheduled*'
                  - 'ec2:*Purchase*'
                  - 'ec2:EnableFastSnapshotRestores'
                Resource: '*'
              - Sid: RestrictASLCInstanceType
                Effect: Allow
                Action: 'autoscaling:CreateLaunchConfiguration'
                Resource: '*'
                Condition:
                  'ForAnyValue:StringNotLikeIfExists':
                    'autoscaling:InstanceType':
                      - '*.nano'
                      - '*.micro'
                      - '*.small'
              - Sid: RestrictASGInstanceTypeAndNo
                Effect: Allow
                Action:
                  - 'autoscaling:UpdateAutoScalingGroup'
                  - 'autoscaling:CreateAutoScalingGroup'
                Resource: '*'
                Condition:
                  NumericGreaterThanIfExists:
                    'autoscaling:MaxSize': '6'
                  'ForAnyValue:StringNotLikeIfExists':
                    'autoscaling:InstanceTypes':
                      - '*.nano'
                      - '*.micro'
                      - '*.small'
  
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref RootRole
  WaitHandle01:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
    Properties: {}
  WaitCondition01:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: CommandHost
    Properties:
      Handle: !Ref WaitHandle01
      Timeout: '1800'
  CommandHost:
    Type: 'AWS::EC2::Instance'
    DependsOn:
      - RootInstanceProfile
      - PublicSubnet1
      - CommandHostSecurityGroup
      - AttachGateway
    Properties:
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref RootInstanceProfile
      ImageId: !Ref LatestAMZN2AmiId
      InstanceType: t3.medium
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref CommandHostSecurityGroup
      Tags:
        - Key: Name
          Value: Command Host
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -ex 
            - |
              yum -y update 
            - |
              mkdir /home/ec2-user/.aws 
            - |
              cat > /home/ec2-user/.aws/config <<EOF
            - |
              [default]
            - 'region = '
            - !Ref 'AWS::Region'
            - |+

            - |
              EOF
            - |
              chown -R ec2-user:ec2-user /home/ec2-user/.aws
            - |
              cd /home/ec2-user
            - >
              wget
              https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-100-RESTRT-1/175-lab-JAWS-autoscaling-linux/s3/UserData.txt
            - /opt/aws/bin/cfn-signal -s true '
            - !Ref WaitHandle01
            - |
              '
Outputs:
  AMIID:
    Value: !Ref LatestAMZN2AmiId
  COMMANDHOSTIP:
    Value: !Sub ${CommandHost.PublicIp}
  KEYNAME:
    Value: !Ref KeyName
  HTTPACCESS:
    Value: !Ref HTTPAccess
  SUBNETID:
    Value: !Ref PublicSubnet1